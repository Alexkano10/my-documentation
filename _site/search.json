[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alex Cano | Junior DevOps y SysAdmin",
    "section": "",
    "text": "Soy Alex Cano y este es mi portfolio. Aqu√≠ documento proyectos reales, laboratorios y soluciones enfocadas a administraci√≥n de sistemas y automatizaci√≥n.\nMi enfoque principal est√° en Linux, CI/CD, Docker, Jenkins y Cloud, √°reas en las que me especializo y aprendo continuamente.\n\nüöÄ ‚ÄúAutomatiza todo lo que puedas y documenta el resto.‚Äù"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Proyectos",
    "section": "",
    "text": "Mis proyectos destacados\n\nWordPress Dev en Local\nWordPress CI/CD con Jenkins"
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html",
    "href": "projects/wordpress-dev-en-local.html",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "Este proyecto proporciona un entorno de desarrollo local para WordPress usando Docker Compose, dise√±ado para que cualquier desarrollador pueda trabajar sin instalaciones complicadas.\n\n\n\n\n\n\nInstalaci√≥n R√°pida\n\n\n\nIdeal para levantar un WordPress funcional en pocos minutos, con persistencia de datos y hot-reload.\n\n\n\n\n\n\nPrimero, comprueba si ya tienes Docker instalado en tu sistema:\ndocker --version\nSi ves una respuesta tipo Docker version 20.10.x, ¬°ya lo tienes instalado! Si no, sigue con la instalaci√≥n.\n\n\n\n\nWindows/MacLinux (Ubuntu)\n\n\n\nDescarga e instala Docker Desktop\nSigue las instrucciones del instalador\nInicia Docker Desktop una vez instalado\n\n\n\nsudo apt update\nsudo apt install docker.io docker-compose-plugin\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Agrega tu usuario al grupo docker (opcional pero recomendado)\nsudo usermod -aG docker $USER\nnewgrp docker\n\n\n\nVerifica que Docker funcione correctamente:\ndocker run hello-world\n\n\n\ngit clone https://github.com/Alexkano10/wordpress-dev-en-local.git\ncd wordpress-dev-en-local\n\n\n\ncp .env.example .env\nEdita el archivo .env con tus credenciales de base de datos y versiones preferidas.\n\n\n\n\n\n\nVariables principales\n\n\n\n\n\n\nVariable\nDescripci√≥n\n\n\n\n\nMYSQL_ROOT_PASSWORD\nContrase√±a root de MySQL\n\n\nMYSQL_DATABASE\nNombre de la base de datos\n\n\nMYSQL_USER\nUsuario de WordPress\n\n\nMYSQL_PASSWORD\nContrase√±a del usuario\n\n\nWORDPRESS_TABLE_PREFIX\nPrefijo de tablas WordPress\n\n\nMYSQL_VERSION\nVersi√≥n de MySQL o MariaDB\n\n\nWORDPRESS_VERSION\nVersi√≥n de WordPress\n\n\n\n\n\n\n\n\n./scripts/start.sh\nUna vez levantado el entorno, accede a http://localhost:8000 para ver tu instalaci√≥n de WordPress.\n\n\n\n\n\n\n# Detener todos los servicios\ndocker compose down\n\n# Reiniciar solo WordPress\ndocker compose up -d wordpress\n\n# Forzar reconstrucci√≥n (cuando cambias Dockerfile o dependencias)\ndocker compose up -d --build\n\n\n\n# Logs de todos los servicios\ndocker compose logs\n\n# Logs de WordPress\ndocker compose logs wordpress\n\n# Logs en tiempo real\ndocker compose logs -f\n\n\n\n\n\n\nLas variables de .env controlan todo el entorno:\nMYSQL_ROOT_PASSWORD=rootpassword\nMYSQL_DATABASE=wordpress\nMYSQL_USER=wp_user\nMYSQL_PASSWORD=wp_password\nWORDPRESS_TABLE_PREFIX=wp_\nMYSQL_VERSION=8.0\nWORDPRESS_VERSION=latest\n\n\n\nwordpress-dev-en-local/\n‚îú‚îÄ‚îÄ database/                # Persistencia de MySQL\n‚îú‚îÄ‚îÄ wordpress/               # C√≥digo fuente de WordPress\n‚îú‚îÄ‚îÄ docker-compose.yml       # Configuraci√≥n de servicios\n‚îú‚îÄ‚îÄ .env.example             # Plantilla de variables de entorno\n‚îú‚îÄ‚îÄ .env                     # Variables de entorno (no versionado)\n‚îî‚îÄ‚îÄ scripts/\n    ‚îî‚îÄ‚îÄ start.sh             # Script de inicio\n\n\n\n\n\nProblemas comunesPermisosPuertos\n\n\n\n\n\n\n\n\n\nProblema\nSoluci√≥n\n\n\n\n\nVariables no definidas\nVerifica que hayas copiado y editado .env correctamente\n\n\nPermisos de carpetas\nEjecuta chown -R $UID:$UID database wordpress\n\n\nHot-reload no funciona\nAseg√∫rate de editar dentro de ./wordpress y recarga el navegador\n\n\nPuerto 8000 ocupado\nCambia el puerto en docker-compose.yml y reinicia los servicios\n\n\nError de conexi√≥n a MySQL\nVerifica que credenciales en .env y WordPress coincidan\n\n\n\n\n\nSi tienes problemas de permisos en Linux:\n# Soluci√≥n para permisos en Linux\nsudo chown -R $USER:$USER database wordpress\n\n\nSi el puerto 8000 est√° ocupado, puedes cambiarlo en el archivo docker-compose.yml:\nservices:\n  wordpress:\n    ports:\n      - \"8001:80\"  # Cambia 8000 por otro puerto disponible\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nEste entorno est√° pensado para desarrollo. No usar en producci√≥n tal cual.\n\n\n\nSiempre mant√©n Docker actualizado para evitar incompatibilidades.\nPuedes cambiar la versi√≥n de WordPress simplemente editando .env y reconstruyendo los servicios.\nPara personalizar m√°s la instalaci√≥n, puedes modificar el archivo docker-compose.yml.\n\n\n\n\nSi encuentras errores o tienes sugerencias de mejora, no dudes en abrir un issue o enviar un pull request en el repositorio.\n\nDesarrollado con ‚ù§Ô∏è para la comunidad de WordPress"
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html#instalaci√≥n-paso-a-paso",
    "href": "projects/wordpress-dev-en-local.html#instalaci√≥n-paso-a-paso",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "Primero, comprueba si ya tienes Docker instalado en tu sistema:\ndocker --version\nSi ves una respuesta tipo Docker version 20.10.x, ¬°ya lo tienes instalado! Si no, sigue con la instalaci√≥n.\n\n\n\n\nWindows/MacLinux (Ubuntu)\n\n\n\nDescarga e instala Docker Desktop\nSigue las instrucciones del instalador\nInicia Docker Desktop una vez instalado\n\n\n\nsudo apt update\nsudo apt install docker.io docker-compose-plugin\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# Agrega tu usuario al grupo docker (opcional pero recomendado)\nsudo usermod -aG docker $USER\nnewgrp docker\n\n\n\nVerifica que Docker funcione correctamente:\ndocker run hello-world\n\n\n\ngit clone https://github.com/Alexkano10/wordpress-dev-en-local.git\ncd wordpress-dev-en-local\n\n\n\ncp .env.example .env\nEdita el archivo .env con tus credenciales de base de datos y versiones preferidas.\n\n\n\n\n\n\nVariables principales\n\n\n\n\n\n\nVariable\nDescripci√≥n\n\n\n\n\nMYSQL_ROOT_PASSWORD\nContrase√±a root de MySQL\n\n\nMYSQL_DATABASE\nNombre de la base de datos\n\n\nMYSQL_USER\nUsuario de WordPress\n\n\nMYSQL_PASSWORD\nContrase√±a del usuario\n\n\nWORDPRESS_TABLE_PREFIX\nPrefijo de tablas WordPress\n\n\nMYSQL_VERSION\nVersi√≥n de MySQL o MariaDB\n\n\nWORDPRESS_VERSION\nVersi√≥n de WordPress\n\n\n\n\n\n\n\n\n./scripts/start.sh\nUna vez levantado el entorno, accede a http://localhost:8000 para ver tu instalaci√≥n de WordPress."
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html#uso-diario",
    "href": "projects/wordpress-dev-en-local.html#uso-diario",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "# Detener todos los servicios\ndocker compose down\n\n# Reiniciar solo WordPress\ndocker compose up -d wordpress\n\n# Forzar reconstrucci√≥n (cuando cambias Dockerfile o dependencias)\ndocker compose up -d --build\n\n\n\n# Logs de todos los servicios\ndocker compose logs\n\n# Logs de WordPress\ndocker compose logs wordpress\n\n# Logs en tiempo real\ndocker compose logs -f"
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html#configuraci√≥n-avanzada",
    "href": "projects/wordpress-dev-en-local.html#configuraci√≥n-avanzada",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "Las variables de .env controlan todo el entorno:\nMYSQL_ROOT_PASSWORD=rootpassword\nMYSQL_DATABASE=wordpress\nMYSQL_USER=wp_user\nMYSQL_PASSWORD=wp_password\nWORDPRESS_TABLE_PREFIX=wp_\nMYSQL_VERSION=8.0\nWORDPRESS_VERSION=latest\n\n\n\nwordpress-dev-en-local/\n‚îú‚îÄ‚îÄ database/                # Persistencia de MySQL\n‚îú‚îÄ‚îÄ wordpress/               # C√≥digo fuente de WordPress\n‚îú‚îÄ‚îÄ docker-compose.yml       # Configuraci√≥n de servicios\n‚îú‚îÄ‚îÄ .env.example             # Plantilla de variables de entorno\n‚îú‚îÄ‚îÄ .env                     # Variables de entorno (no versionado)\n‚îî‚îÄ‚îÄ scripts/\n    ‚îî‚îÄ‚îÄ start.sh             # Script de inicio"
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html#soluci√≥n-de-problemas",
    "href": "projects/wordpress-dev-en-local.html#soluci√≥n-de-problemas",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "Problemas comunesPermisosPuertos\n\n\n\n\n\n\n\n\n\nProblema\nSoluci√≥n\n\n\n\n\nVariables no definidas\nVerifica que hayas copiado y editado .env correctamente\n\n\nPermisos de carpetas\nEjecuta chown -R $UID:$UID database wordpress\n\n\nHot-reload no funciona\nAseg√∫rate de editar dentro de ./wordpress y recarga el navegador\n\n\nPuerto 8000 ocupado\nCambia el puerto en docker-compose.yml y reinicia los servicios\n\n\nError de conexi√≥n a MySQL\nVerifica que credenciales en .env y WordPress coincidan\n\n\n\n\n\nSi tienes problemas de permisos en Linux:\n# Soluci√≥n para permisos en Linux\nsudo chown -R $USER:$USER database wordpress\n\n\nSi el puerto 8000 est√° ocupado, puedes cambiarlo en el archivo docker-compose.yml:\nservices:\n  wordpress:\n    ports:\n      - \"8001:80\"  # Cambia 8000 por otro puerto disponible"
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html#notas-finales",
    "href": "projects/wordpress-dev-en-local.html#notas-finales",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "Important\n\n\n\nEste entorno est√° pensado para desarrollo. No usar en producci√≥n tal cual.\n\n\n\nSiempre mant√©n Docker actualizado para evitar incompatibilidades.\nPuedes cambiar la versi√≥n de WordPress simplemente editando .env y reconstruyendo los servicios.\nPara personalizar m√°s la instalaci√≥n, puedes modificar el archivo docker-compose.yml."
  },
  {
    "objectID": "projects/wordpress-dev-en-local.html#actualizaciones-y-contribuciones",
    "href": "projects/wordpress-dev-en-local.html#actualizaciones-y-contribuciones",
    "title": "WordPress Dev en Local",
    "section": "",
    "text": "Si encuentras errores o tienes sugerencias de mejora, no dudes en abrir un issue o enviar un pull request en el repositorio.\n\nDesarrollado con ‚ù§Ô∏è para la comunidad de WordPress"
  },
  {
    "objectID": "index.html#habilidades-y-herramientas",
    "href": "index.html#habilidades-y-herramientas",
    "title": "Alex Cano | Junior DevOps y SysAdmin",
    "section": "üîß Habilidades y Herramientas",
    "text": "üîß Habilidades y Herramientas\n\n\n\nüß∞ Herramienta\n‚öôÔ∏è Nivel\n\n\n\n\nLinux\nIntermedio\n\n\nDocker\nIntermedio\n\n\nJenkins\nIntermedio\n\n\nKubernetes\nB√°sico\n\n\nTerraform\nB√°sico\n\n\nAWS\nB√°sico"
  },
  {
    "objectID": "index.html#bienvenidos",
    "href": "index.html#bienvenidos",
    "title": "Alex Cano | Junior DevOps y SysAdmin",
    "section": "",
    "text": "Soy Alex Cano y este es mi portfolio. Aqu√≠ documento proyectos reales, laboratorios y soluciones enfocadas a administraci√≥n de sistemas y automatizaci√≥n.\nMi enfoque principal est√° en Linux, CI/CD, Docker, Jenkins y Cloud, √°reas en las que me especializo y aprendo continuamente.\n\nüöÄ ‚ÄúAutomatiza todo lo que puedas y documenta el resto.‚Äù"
  },
  {
    "objectID": "certifications.html",
    "href": "certifications.html",
    "title": "Certificaciones",
    "section": "",
    "text": "Tip\n\n\n\nCursos y certificaciones que he completado.\n\n\n\n\n\n\n\n\nCertificaci√≥n\nVer imagen\nDescargar PDF\n\n\n\n\nFullstack Junior en Java\n\nPDF\n\n\nJava Programming 1\n\nPDF\n\n\n\n\n\n\n\n\n\n\nCertificaci√≥n\nVer imagen\nDescargar PDF\n\n\n\n\nConceptos B√°sicos de Redes (Cisco)\n\nPDF\n\n\n\n\n\n\n\n\n\n\n\n\nCertificaci√≥n\nVer imagen\nDescargar PDF\n\n\n\n\nHerramientas DevOps\n\nPDF"
  },
  {
    "objectID": "certifications.html#fullstack-java",
    "href": "certifications.html#fullstack-java",
    "title": "Certificaciones",
    "section": "",
    "text": "Certificaci√≥n\nVer imagen\nDescargar PDF\n\n\n\n\nFullstack Junior en Java\n\nPDF\n\n\nJava Programming 1\n\nPDF"
  },
  {
    "objectID": "certifications.html#redes-cisco",
    "href": "certifications.html#redes-cisco",
    "title": "Certificaciones",
    "section": "",
    "text": "Certificaci√≥n\nVer imagen\nDescargar PDF\n\n\n\n\nConceptos B√°sicos de Redes (Cisco)\n\nPDF"
  },
  {
    "objectID": "certifications.html#devops",
    "href": "certifications.html#devops",
    "title": "Certificaciones",
    "section": "",
    "text": "Certificaci√≥n\nVer imagen\nDescargar PDF\n\n\n\n\nHerramientas DevOps\n\nPDF"
  },
  {
    "objectID": "projects/wordpress-jenkins.html",
    "href": "projects/wordpress-jenkins.html",
    "title": "WordPress Deploy con Jenkins",
    "section": "",
    "text": "Este documento describe la estructura, configuraci√≥n y proceso de despliegue de una aplicaci√≥n WordPress en un entorno de desarrollo, producci√≥n y Jenkins para CI/CD, utilizando contenedores Docker y sincronizaci√≥n automatizada mediante Jenkins.\n\n\n\n\n\n\n\nEspecificaci√≥n\nDetalle\n\n\n\n\nSistema operativo\nDebian 12\n\n\nUsuario\nprod\n\n\nIP est√°tica\n192.168.1.100\n\n\nRecursos\n2 CPU, 2048 MB RAM, 19GB disco\n\n\n\n\n\n\n\n\n\nEspecificaci√≥n\nDetalle\n\n\n\n\nSistema operativo\nDebian 12\n\n\nUsuario\ndev\n\n\nIP est√°tica\n192.168.1.101\n\n\nRecursos\n2 CPU, 2048 MB RAM, 19GB disco\n\n\n\n\n\n\n\n\n\nEspecificaci√≥n\nDetalle\n\n\n\n\nSistema operativo\nDebian 12\n\n\nUsuario\njenkins\n\n\nIP est√°tica\n192.168.1.102\n\n\nRecursos\n2 CPU, 2048 MB RAM, 19GB disco\n\n\n\n\n\n\n\nLa estructura del proyecto en el entorno de desarrollo se organiza de la siguiente manera:\n/home/dev/test/\n‚îú‚îÄ‚îÄ database\n‚îÇ   ‚îî‚îÄ‚îÄ initdb        # Contiene scripts para inicializaci√≥n de base de datos\n‚îú‚îÄ‚îÄ docker-compose.yml\n‚îú‚îÄ‚îÄ .env                 # Variables de entorno (excluido de sincronizaci√≥n)\n‚îî‚îÄ‚îÄ wordpress          # C√≥digo fuente del sitio\n\n\n\nwp_app: WordPress (√∫ltimo)\nwp_db: MariaDB 10.11\n\n\n\n\nservices:\n  db:\n    image: \"mariadb:${MARIADB_VERSION}\"\n    container_name: wp_db\n    ...\n  wordpress:\n    image: \"wordpress:${WORDPRESS_VERSION}\"\n    user: \"${LOCAL_UID}:${LOCAL_GID}\"\n    container_name: wp_app\n    depends_on:\n      - db\n    volumes:\n      - ./wordpress:/var/www/html:delegated\n    environment:\n      - APACHE_RUN_USER=#${LOCAL_UID}\n      - APACHE_RUN_GROUP=#${LOCAL_GID}\n\n\n\n\n\n\n\n\nVerificar conectividad remota con las VMs de DEV y PROD mediante SSH y Jenkins.\n\n\n\n\nConfigurar claves SSH en las VMs y credenciales en Jenkins\nCrear job Freestyle\nActivar SSH Agent\nConfigurar Build Step para ejecutar comandos\n\n\n\n\necho \"Conectando a DEV (101)...\"\nssh -o StrictHostKeyChecking=no dev@192.168.1.101 \"hostname && uptime\"\n\necho \"Conectando a PROD (100)...\"\nssh -o StrictHostKeyChecking=no prod@192.168.1.100 \"hostname && uptime\"\n\n\n\nConexi√≥n exitosa que muestra hostname y uptime de cada VM.\n\n\n\n\n\n\n\nSincronizar el c√≥digo de la VM de desarrollo a la de producci√≥n, excluyendo .env, estableciendo permisos correctos y evitando transferencias innecesarias.\n\n\n\n#!/bin/bash\nset -e\n\necho \"==&gt; Instalando rsync (temporal)...\"\napt-get update && apt-get install -y rsync\n\nDEV_HOST=\"dev@192.168.1.101\"\nPROD_HOST=\"prod@192.168.1.100\"\nSOURCE_DIR=\"/home/dev/test/\"\nDEST_DIR=\"/home/prod/test/\"\nTMP_DIR=\"./sync_tmp/\"\n\nrm -rf \"$TMP_DIR\"\nmkdir -p \"$TMP_DIR\"\n\necho \"==&gt; Sincronizando desde DEV a Jenkins (excluyendo .env)...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$DEV_HOST:$SOURCE_DIR\" \\\n  \"$TMP_DIR\"\n\necho \"==&gt; Enviando a producci√≥n (con permisos y propietario www-data)...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  --chown=www-data:www-data \\\n  --chmod=D755,F644 \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$TMP_DIR\" \\\n  \"$PROD_HOST:$DEST_DIR\"\n\necho \"==&gt; Completado\"\n\n\n\n\nSe instala rsync temporalmente en el servidor Jenkins\nSe sincroniza localmente en Jenkins desde DEV (excluyendo .env)\nSe sube a PROD cambiando propietario a www-data y asegurando permisos seguros\n--no-perms, --no-owner, --no-group: evita sobreescritura de metadatos desde DEV\n\n\n\n\n\n\n\n\n\nSincronizar √∫nicamente los cambios realizados en la carpeta de c√≥digo (wordpress/) desde la VM DEV a la VM PROD, preservando:\n\nEl archivo .env de producci√≥n\nLos permisos actuales definidos por UID:GID en PROD\nLa base de datos y contenedores en ejecuci√≥n\nBackup previo al despliegue para permitir rollback\n\n\n\n\nEn DEV se cre√≥ un archivo test.php con el siguiente contenido para verificar la sincronizaci√≥n:\n&lt;?php\necho \"&lt;h1&gt;Prueba de Sincronizaci√≥n DEV ‚Üí PROD&lt;/h1&gt;\";\necho \"&lt;p&gt;Versi√≥n desde Jenkins: \" . date(\"Y-m-d H:i:s\") . \"&lt;/p&gt;\";\n?&gt;\nURL de prueba en PROD: http://192.168.1.100/test.php\n\n\n\n#!/bin/bash\nset -e\n\n# Variables\nDEV_HOST=\"dev@192.168.1.101\"\nPROD_HOST=\"prod@192.168.1.100\"\nSOURCE_DIR=\"/home/dev/test/wordpress/\"\nDEST_DIR=\"/home/prod/test/wordpress/\"\nTMP_DIR=\"./sync_tmp/\"\nBACKUP_DIR=\"/home/prod/backups/$(date +%Y%m%d_%H%M%S)\"\n\necho \"==&gt; Limpieza del temporal...\"\nrm -rf \"$TMP_DIR\"\nmkdir -p \"$TMP_DIR\"\n\necho \"==&gt; Descargando c√≥digo desde DEV (sin .env)...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$DEV_HOST:$SOURCE_DIR\" \\\n  \"$TMP_DIR\"\n\necho \"==&gt; Creando backup en PROD...\"\nssh -o StrictHostKeyChecking=no \"$PROD_HOST\" \"mkdir -p $BACKUP_DIR && cp -r $DEST_DIR/* $BACKUP_DIR\"\n\necho \"==&gt; Subiendo a producci√≥n sin modificar permisos ni .env...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$TMP_DIR\" \\\n  \"$PROD_HOST:$DEST_DIR\"\n\necho \"==&gt; Despliegue completado sin tocar permisos ni .env\"\n\n\n\n\nSolo se sincronizan archivos modificados (rsync incremental)\n.env no se sobrescribe\nPermisos en PROD permanecen intactos\nLa web refleja los cambios sin necesidad de reiniciar contenedores\nExiste un backup creado en /home/prod/backups/YYYYMMDD_HHMMSS\n\n\n\n\nEn caso de necesitar revertir los cambios, ejecutar:\nssh prod@192.168.1.100\ncp -r /home/prod/backups/20250522_082000/* /home/prod/test/wordpress/\n\n\n\n\n\n\n\nLas claves SSH se configuran sin passphrase para automatizaci√≥n\nStrictHostKeyChecking deshabilitado para conexiones autom√°ticas\nExclusi√≥n del archivo .env para mantener configuraciones espec√≠ficas del entorno\n\n\n\n\n\nUso de rsync para transferencias incrementales\nSincronizaci√≥n temporal en Jenkins para optimizar red\nPreservaci√≥n de permisos existentes en producci√≥n\n\n\n\n\n\nLogs detallados de cada etapa del proceso\nVerificaci√≥n de conectividad previa al despliegue\nSistema de backup autom√°tico antes de cada actualizaci√≥n"
  },
  {
    "objectID": "projects/wordpress-jenkins.html#infraestructura-de-las-vms",
    "href": "projects/wordpress-jenkins.html#infraestructura-de-las-vms",
    "title": "WordPress Deploy con Jenkins",
    "section": "",
    "text": "Especificaci√≥n\nDetalle\n\n\n\n\nSistema operativo\nDebian 12\n\n\nUsuario\nprod\n\n\nIP est√°tica\n192.168.1.100\n\n\nRecursos\n2 CPU, 2048 MB RAM, 19GB disco\n\n\n\n\n\n\n\n\n\nEspecificaci√≥n\nDetalle\n\n\n\n\nSistema operativo\nDebian 12\n\n\nUsuario\ndev\n\n\nIP est√°tica\n192.168.1.101\n\n\nRecursos\n2 CPU, 2048 MB RAM, 19GB disco\n\n\n\n\n\n\n\n\n\nEspecificaci√≥n\nDetalle\n\n\n\n\nSistema operativo\nDebian 12\n\n\nUsuario\njenkins\n\n\nIP est√°tica\n192.168.1.102\n\n\nRecursos\n2 CPU, 2048 MB RAM, 19GB disco"
  },
  {
    "objectID": "projects/wordpress-jenkins.html#estructura-del-proyecto-en-dev",
    "href": "projects/wordpress-jenkins.html#estructura-del-proyecto-en-dev",
    "title": "WordPress Deploy con Jenkins",
    "section": "",
    "text": "La estructura del proyecto en el entorno de desarrollo se organiza de la siguiente manera:\n/home/dev/test/\n‚îú‚îÄ‚îÄ database\n‚îÇ   ‚îî‚îÄ‚îÄ initdb        # Contiene scripts para inicializaci√≥n de base de datos\n‚îú‚îÄ‚îÄ docker-compose.yml\n‚îú‚îÄ‚îÄ .env                 # Variables de entorno (excluido de sincronizaci√≥n)\n‚îî‚îÄ‚îÄ wordpress          # C√≥digo fuente del sitio\n\n\n\nwp_app: WordPress (√∫ltimo)\nwp_db: MariaDB 10.11\n\n\n\n\nservices:\n  db:\n    image: \"mariadb:${MARIADB_VERSION}\"\n    container_name: wp_db\n    ...\n  wordpress:\n    image: \"wordpress:${WORDPRESS_VERSION}\"\n    user: \"${LOCAL_UID}:${LOCAL_GID}\"\n    container_name: wp_app\n    depends_on:\n      - db\n    volumes:\n      - ./wordpress:/var/www/html:delegated\n    environment:\n      - APACHE_RUN_USER=#${LOCAL_UID}\n      - APACHE_RUN_GROUP=#${LOCAL_GID}"
  },
  {
    "objectID": "projects/wordpress-jenkins.html#jenkins-automatizaci√≥n-y-despliegue",
    "href": "projects/wordpress-jenkins.html#jenkins-automatizaci√≥n-y-despliegue",
    "title": "WordPress Deploy con Jenkins",
    "section": "",
    "text": "Verificar conectividad remota con las VMs de DEV y PROD mediante SSH y Jenkins.\n\n\n\n\nConfigurar claves SSH en las VMs y credenciales en Jenkins\nCrear job Freestyle\nActivar SSH Agent\nConfigurar Build Step para ejecutar comandos\n\n\n\n\necho \"Conectando a DEV (101)...\"\nssh -o StrictHostKeyChecking=no dev@192.168.1.101 \"hostname && uptime\"\n\necho \"Conectando a PROD (100)...\"\nssh -o StrictHostKeyChecking=no prod@192.168.1.100 \"hostname && uptime\"\n\n\n\nConexi√≥n exitosa que muestra hostname y uptime de cada VM.\n\n\n\n\n\n\n\nSincronizar el c√≥digo de la VM de desarrollo a la de producci√≥n, excluyendo .env, estableciendo permisos correctos y evitando transferencias innecesarias.\n\n\n\n#!/bin/bash\nset -e\n\necho \"==&gt; Instalando rsync (temporal)...\"\napt-get update && apt-get install -y rsync\n\nDEV_HOST=\"dev@192.168.1.101\"\nPROD_HOST=\"prod@192.168.1.100\"\nSOURCE_DIR=\"/home/dev/test/\"\nDEST_DIR=\"/home/prod/test/\"\nTMP_DIR=\"./sync_tmp/\"\n\nrm -rf \"$TMP_DIR\"\nmkdir -p \"$TMP_DIR\"\n\necho \"==&gt; Sincronizando desde DEV a Jenkins (excluyendo .env)...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$DEV_HOST:$SOURCE_DIR\" \\\n  \"$TMP_DIR\"\n\necho \"==&gt; Enviando a producci√≥n (con permisos y propietario www-data)...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  --chown=www-data:www-data \\\n  --chmod=D755,F644 \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$TMP_DIR\" \\\n  \"$PROD_HOST:$DEST_DIR\"\n\necho \"==&gt; Completado\"\n\n\n\n\nSe instala rsync temporalmente en el servidor Jenkins\nSe sincroniza localmente en Jenkins desde DEV (excluyendo .env)\nSe sube a PROD cambiando propietario a www-data y asegurando permisos seguros\n--no-perms, --no-owner, --no-group: evita sobreescritura de metadatos desde DEV"
  },
  {
    "objectID": "projects/wordpress-jenkins.html#job-jenkins-sync-dev-to-prod-wordpress",
    "href": "projects/wordpress-jenkins.html#job-jenkins-sync-dev-to-prod-wordpress",
    "title": "WordPress Deploy con Jenkins",
    "section": "",
    "text": "Sincronizar √∫nicamente los cambios realizados en la carpeta de c√≥digo (wordpress/) desde la VM DEV a la VM PROD, preservando:\n\nEl archivo .env de producci√≥n\nLos permisos actuales definidos por UID:GID en PROD\nLa base de datos y contenedores en ejecuci√≥n\nBackup previo al despliegue para permitir rollback\n\n\n\n\nEn DEV se cre√≥ un archivo test.php con el siguiente contenido para verificar la sincronizaci√≥n:\n&lt;?php\necho \"&lt;h1&gt;Prueba de Sincronizaci√≥n DEV ‚Üí PROD&lt;/h1&gt;\";\necho \"&lt;p&gt;Versi√≥n desde Jenkins: \" . date(\"Y-m-d H:i:s\") . \"&lt;/p&gt;\";\n?&gt;\nURL de prueba en PROD: http://192.168.1.100/test.php\n\n\n\n#!/bin/bash\nset -e\n\n# Variables\nDEV_HOST=\"dev@192.168.1.101\"\nPROD_HOST=\"prod@192.168.1.100\"\nSOURCE_DIR=\"/home/dev/test/wordpress/\"\nDEST_DIR=\"/home/prod/test/wordpress/\"\nTMP_DIR=\"./sync_tmp/\"\nBACKUP_DIR=\"/home/prod/backups/$(date +%Y%m%d_%H%M%S)\"\n\necho \"==&gt; Limpieza del temporal...\"\nrm -rf \"$TMP_DIR\"\nmkdir -p \"$TMP_DIR\"\n\necho \"==&gt; Descargando c√≥digo desde DEV (sin .env)...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$DEV_HOST:$SOURCE_DIR\" \\\n  \"$TMP_DIR\"\n\necho \"==&gt; Creando backup en PROD...\"\nssh -o StrictHostKeyChecking=no \"$PROD_HOST\" \"mkdir -p $BACKUP_DIR && cp -r $DEST_DIR/* $BACKUP_DIR\"\n\necho \"==&gt; Subiendo a producci√≥n sin modificar permisos ni .env...\"\nrsync -avz \\\n  --no-perms --no-owner --no-group \\\n  --exclude='.env' \\\n  -e \"ssh -o StrictHostKeyChecking=no\" \\\n  \"$TMP_DIR\" \\\n  \"$PROD_HOST:$DEST_DIR\"\n\necho \"==&gt; Despliegue completado sin tocar permisos ni .env\"\n\n\n\n\nSolo se sincronizan archivos modificados (rsync incremental)\n.env no se sobrescribe\nPermisos en PROD permanecen intactos\nLa web refleja los cambios sin necesidad de reiniciar contenedores\nExiste un backup creado en /home/prod/backups/YYYYMMDD_HHMMSS\n\n\n\n\nEn caso de necesitar revertir los cambios, ejecutar:\nssh prod@192.168.1.100\ncp -r /home/prod/backups/20250522_082000/* /home/prod/test/wordpress/"
  },
  {
    "objectID": "projects/wordpress-jenkins.html#consideraciones-t√©cnicas",
    "href": "projects/wordpress-jenkins.html#consideraciones-t√©cnicas",
    "title": "WordPress Deploy con Jenkins",
    "section": "",
    "text": "Las claves SSH se configuran sin passphrase para automatizaci√≥n\nStrictHostKeyChecking deshabilitado para conexiones autom√°ticas\nExclusi√≥n del archivo .env para mantener configuraciones espec√≠ficas del entorno\n\n\n\n\n\nUso de rsync para transferencias incrementales\nSincronizaci√≥n temporal en Jenkins para optimizar red\nPreservaci√≥n de permisos existentes en producci√≥n\n\n\n\n\n\nLogs detallados de cada etapa del proceso\nVerificaci√≥n de conectividad previa al despliegue\nSistema de backup autom√°tico antes de cada actualizaci√≥n"
  },
  {
    "objectID": "index.html#qu√©-encontrar√°s-en-este-sitio",
    "href": "index.html#qu√©-encontrar√°s-en-este-sitio",
    "title": "Alex Cano | Junior DevOps y SysAdmin",
    "section": "üìå ¬øQu√© encontrar√°s en este sitio?",
    "text": "üìå ¬øQu√© encontrar√°s en este sitio?\n\nüåê Proyectos DevOps documentados paso a paso\n\nüì∏ Capturas, scripts y pipelines reales\n\nüìö Certificaciones y formaci√≥n continua\n\nüß™ Laboratorios con pruebas y errores comunes"
  }
]