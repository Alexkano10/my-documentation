---
title: "WordPress Dev en Local"
subtitle: "Entorno de desarrollo con Docker Compose"
author: "Alexkano10"
date: last-modified
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-location: right
    code-copy: true
    highlight-style: github
    code-tools: true
    css: styles.css
---

# WordPress Dev en Local

Este proyecto proporciona un entorno de desarrollo local para **WordPress** usando **Docker Compose**, dise√±ado para que cualquier desarrollador pueda trabajar sin instalaciones complicadas.

::: {.callout-tip appearance="simple"}
## Instalaci√≥n R√°pida
Ideal para levantar un WordPress funcional en pocos minutos, con persistencia de datos y hot-reload.
:::

## üöÄ Instalaci√≥n paso a paso

### Requisitos previos

Primero, comprueba si ya tienes Docker instalado en tu sistema:

```bash
docker --version
```

Si ves una respuesta tipo `Docker version 20.10.x`, ¬°ya lo tienes instalado! Si no, sigue con la instalaci√≥n.

### 1. Instalar Docker y Docker Compose

:::: {.panel-tabset}

## Windows/Mac
- Descarga e instala [Docker Desktop](https://www.docker.com/products/docker-desktop/)
- Sigue las instrucciones del instalador
- Inicia Docker Desktop una vez instalado

## Linux (Ubuntu)
```bash
sudo apt update
sudo apt install docker.io docker-compose-plugin
sudo systemctl start docker
sudo systemctl enable docker

# Agrega tu usuario al grupo docker (opcional pero recomendado)
sudo usermod -aG docker $USER
newgrp docker
```

::::

Verifica que Docker funcione correctamente:

```bash
docker run hello-world
```

### 2. Clonar el repositorio

```bash
git clone https://github.com/Alexkano10/wordpress-dev-en-local.git
cd wordpress-dev-en-local
```

### 3. Configurar variables de entorno

```bash
cp .env.example .env
```

Edita el archivo `.env` con tus credenciales de base de datos y versiones preferidas.

::: {.callout-note}
## Variables principales

| Variable | Descripci√≥n |
|----------|-------------|
| `MYSQL_ROOT_PASSWORD` | Contrase√±a root de MySQL |
| `MYSQL_DATABASE` | Nombre de la base de datos |
| `MYSQL_USER` | Usuario de WordPress |
| `MYSQL_PASSWORD` | Contrase√±a del usuario |
| `WORDPRESS_TABLE_PREFIX` | Prefijo de tablas WordPress |
| `MYSQL_VERSION` | Versi√≥n de MySQL o MariaDB |
| `WORDPRESS_VERSION` | Versi√≥n de WordPress |
:::

### 4. Iniciar el entorno

```bash
./scripts/start.sh
```

Una vez levantado el entorno, accede a [http://localhost:8000](http://localhost:8000) para ver tu instalaci√≥n de WordPress.

## üõ†Ô∏è Uso diario

### Gesti√≥n de servicios

```bash
# Detener todos los servicios
docker compose down

# Reiniciar solo WordPress
docker compose up -d wordpress

# Forzar reconstrucci√≥n (cuando cambias Dockerfile o dependencias)
docker compose up -d --build
```

### Acceso a logs

```bash
# Logs de todos los servicios
docker compose logs

# Logs de WordPress
docker compose logs wordpress

# Logs en tiempo real
docker compose logs -f
```

## üîß Configuraci√≥n avanzada

### Variables de entorno

Las variables de `.env` controlan todo el entorno:

```env
MYSQL_ROOT_PASSWORD=rootpassword
MYSQL_DATABASE=wordpress
MYSQL_USER=wp_user
MYSQL_PASSWORD=wp_password
WORDPRESS_TABLE_PREFIX=wp_
MYSQL_VERSION=8.0
WORDPRESS_VERSION=latest
```

### Estructura del proyecto

```plaintext
wordpress-dev-en-local/
‚îú‚îÄ‚îÄ database/                # Persistencia de MySQL
‚îú‚îÄ‚îÄ wordpress/               # C√≥digo fuente de WordPress
‚îú‚îÄ‚îÄ docker-compose.yml       # Configuraci√≥n de servicios
‚îú‚îÄ‚îÄ .env.example             # Plantilla de variables de entorno
‚îú‚îÄ‚îÄ .env                     # Variables de entorno (no versionado)
‚îî‚îÄ‚îÄ scripts/
    ‚îî‚îÄ‚îÄ start.sh             # Script de inicio
```

## ‚ö†Ô∏è Soluci√≥n de problemas

::: {.panel-tabset}

## Problemas comunes

| Problema | Soluci√≥n |
|----------|----------|
| Variables no definidas | Verifica que hayas copiado y editado `.env` correctamente |
| Permisos de carpetas | Ejecuta `chown -R $UID:$UID database wordpress` |
| Hot-reload no funciona | Aseg√∫rate de editar dentro de `./wordpress` y recarga el navegador |
| Puerto 8000 ocupado | Cambia el puerto en `docker-compose.yml` y reinicia los servicios |
| Error de conexi√≥n a MySQL | Verifica que credenciales en `.env` y WordPress coincidan |

## Permisos

Si tienes problemas de permisos en Linux:

```bash
# Soluci√≥n para permisos en Linux
sudo chown -R $USER:$USER database wordpress
```

## Puertos

Si el puerto 8000 est√° ocupado, puedes cambiarlo en el archivo `docker-compose.yml`:

```yaml
services:
  wordpress:
    ports:
      - "8001:80"  # Cambia 8000 por otro puerto disponible
```

:::

## üìã Notas finales

::: {.callout-important}
Este entorno est√° pensado para desarrollo. No usar en producci√≥n tal cual.
:::

- Siempre mant√©n Docker actualizado para evitar incompatibilidades.
- Puedes cambiar la versi√≥n de WordPress simplemente editando `.env` y reconstruyendo los servicios.
- Para personalizar m√°s la instalaci√≥n, puedes modificar el archivo `docker-compose.yml`.

## üîÑ Actualizaciones y contribuciones

Si encuentras errores o tienes sugerencias de mejora, no dudes en abrir un issue o enviar un pull request en el repositorio.

---

Desarrollado con ‚ù§Ô∏è para la comunidad de WordPress